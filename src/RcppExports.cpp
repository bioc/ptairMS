// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// findLimDensity
Rcpp::List findLimDensity(Rcpp::NumericVector dens, int istart, int state);
RcppExport SEXP _ptairMS_findLimDensity(SEXP densSEXP, SEXP istartSEXP, SEXP stateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dens(densSEXP);
    Rcpp::traits::input_parameter< int >::type istart(istartSEXP);
    Rcpp::traits::input_parameter< int >::type state(stateSEXP);
    rcpp_result_gen = Rcpp::wrap(findLimDensity(dens, istart, state));
    return rcpp_result_gen;
END_RCPP
}
// findEqualGreaterM
Rcpp::NumericVector findEqualGreaterM(Rcpp::NumericVector x, Rcpp::NumericVector values);
RcppExport SEXP _ptairMS_findEqualGreaterM(SEXP xSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(findEqualGreaterM(x, values));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ptairMS_findLimDensity", (DL_FUNC) &_ptairMS_findLimDensity, 3},
    {"_ptairMS_findEqualGreaterM", (DL_FUNC) &_ptairMS_findEqualGreaterM, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ptairMS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
