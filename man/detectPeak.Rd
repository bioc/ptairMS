% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/Raw_Methods.R,
%   R/peak_detection.R
\name{detectPeak}
\alias{detectPeak}
\alias{detectPeak,ptrRaw-method}
\alias{detectPeak,ptrSet-method}
\title{Detection and quantification of peaks for ptrSet object.}
\usage{
detectPeak(
  x,
  ppm = 130,
  minIntensity = 10,
  thIntensityRate = 0.01,
  mzNominal = NULL,
  resolutionRange = NULL,
  fctFit = NULL,
  smoothPenalty = NULL,
  parallelize = FALSE,
  nbCores = 2,
  saving = TRUE,
  saveDir = x@parameter$saveDir,
  ...
)

\S4method{detectPeak}{ptrRaw}(
  x,
  ppm = 130,
  minIntensity = 10,
  thIntensityRate = 0.01,
  mzNominal = NULL,
  resolutionRange = NULL,
  fctFit = "averagePeak",
  smoothPenalty = NULL,
  timeLimit,
  knots = NULL,
  mzPrimaryIon = 21.022,
  ...
)

\S4method{detectPeak}{ptrSet}(
  x,
  ppm = 130,
  minIntensity = 10,
  thIntensityRate = 0.01,
  mzNominal = NULL,
  resolutionRange = NULL,
  fctFit = NULL,
  smoothPenalty = 0,
  parallelize = FALSE,
  nbCores = 2,
  saving = TRUE,
  saveDir = x@parameter$saveDir,
  ...
)
}
\arguments{
\item{x}{ptrSet object}

\item{ppm}{the minimum distance in ppm between two peaks}

\item{minIntensity}{the minimum intensity for peak detection. The threshold for peak detection
will be : max ( \code{minPeakDetect} , threshold noise ). The threshold noise correspond to
 max(\code{thNoiseRate} * max( noise around the nominal mass), \code{thIntensityRate} * 
 max( intensity in the nominal mass)}

\item{thIntensityRate}{The rate who is multiply by the max signal intensity}

\item{mzNominal}{nominal mass who peak will be detected, by default all 
nominal mass present in the mass axis}

\item{resolutionRange}{vector with resolution min, resolution Mean, and resolution max of the PTR}

\item{fctFit}{the function for the quantification of Peak, should be sech2 or Average}

\item{smoothPenalty}{second order penalty coefficient of the p-spline used for two-dimensional 
regression. If \code{NULL} the coefficient is find by generalized cross validation (GCV) criteria}

\item{parallelize}{Boolean. If \code{TRUE} loop aver files will be paralleled}

\item{nbCores}{number of cluster to use for parallel computation.}

\item{saving}{boolean. If TRUE, the object will be saved in saveDir with the
\code{setName} parameter of \code{createPtrSet} function}

\item{saveDir}{The directory where the ptrSet object will be saved in .RData. If NULL, nothing will be saved}

\item{...}{parameter of processFun}

\item{timeLimit}{index time of the expiration limits and background. 
Should be provided by \code{\link[ptairMS]{timeLimits}} function}

\item{knots}{numeric vector correspond to the knot that will be use for the two dimensional 
regression for each file. Should be provided by \code{\link[ptairMS]{defineKnots}} function}

\item{mzPrimaryIon}{the exact mass of the primary ion isotope}
}
\value{
a S4 object ptrSet, that contains the input ptrset completed with the peakLists.
}
\description{
\code{detectPeak} function calibrate and  detect peak on the average total spectrum of all file present in ptrSet who have not already 
been processed. After that, it evaluate the temporal evolution of each peaks thanks to a two-dimensional 
penalize spline regression. Finally, the expiration points (if there are defined in the ptrSet) are average, 
and a t-test is performed to see the difference between expiration and ambient air. 
To see the peakList use getPeakList() method, which each element correspond to the Peak List of one file.
To resume, the following steps are done for each files: \cr
for each expiration and ambient air :
\itemize{
\item calibration each timeCalib second
\item peak detection 
\item estimation of temporal evolution
\item t-test between expiration and ambient air
}
}
\examples{

library(ptairData)
filePath <- system.file("extdata/exhaledAir/ind1", "ind1-1.h5", package = "ptairData")
raw <- readRaw(filePath,mzCalibRef=c(21.022,59.049))
timeLimit<-timeLimits(raw,fracMaxTIC=0.7)
knots<-defineKnots(object = raw,timeLimit=timeLimit)
peakList <- detectPeak(raw, timeLimit=timeLimit, mzNominal = c(21,59),
smoothPenalty=0,knots=knots)
Biobase::fData(peakList)
library(ptairData)
directory <- system.file("extdata/exhaledAir",  package = "ptairData")
exhaledPtrset<-createPtrSet(dir=directory,setName="exhaledPtrset",mzCalibRef=c(21.022,59.049),
fracMaxTIC=0.9,saveDir= NULL)
exhaledPtrset  <- detectPeak(exhaledPtrset ,mzNominal=c(59,60))
peakListEset<-getPeakList(exhaledPtrset)
Biobase::fData(peakListEset[[1]])
Biobase::exprs(peakListEset[[1]])
}
